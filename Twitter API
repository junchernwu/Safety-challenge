#Import the necessary methods from tweepy library
from tweepy import API
from tweepy import Cursor
from tweepy.streaming import StreamListener
from tweepy import OAuthHandler
from tweepy import Stream


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import re
from textblob import TextBlob


#Variables that contains the user credentials to access Twitter API 
access_token = "400542625-VqmTQxuAkQiNj9VLKFykwQ9Ra9C5sXHhphaa1IbE"
access_token_secret = "fywKd1TKHZQVB9sMLT4pZcBXIrTZl2F5zuhUyCDfkBO9o"
consumer_key = "mp9hloesroknEJvn66qSdhq29"
consumer_secret = "RhzzVG9xgtS5Yy60vrqqA5MJDYFNmup77HTqBXf36OG3yJvFxd"

## twitter client##
class TwitterClient():
    def __init__(self, twitter_user=None):
        self.auth= TwitterAuthenticator().authenticate_twitter_app()
        self.twitter_client=API(self.auth)
        
        self.twitter_user=twitter_user
    def get_twitter_client_api(self):
        return self.twitter_client

    def get_user_timeline_tweets(self, num_tweets):
        tweets=[]
        for tweet in Cursor(self.twitter_client.user_timeline,id=self.twitter_user).items(num_tweets):
            tweets.append(tweet)
        return tweets
    def get_friend_list(self,num_friends):
        friend_list=[]
        for friend in Cursor(self.twitter_client.friends,id=self.twitter_user).items(num_friends):
            friend_list.append(friend)
        return friend_list
    
###twitter authenticator
class TwitterAuthenticator():
    def authenticate_twitter_app(self):
        auth = OAuthHandler(consumer_key, consumer_secret)
        auth.set_access_token(access_token, access_token_secret)
        return auth
class TwitterStreamer():
    """
    class for streaming and processing live tweets
    """
    def __init__(self):
        self.twitter_authenticator=TwitterAuthenticator()
        
    def stream_tweets(self,  fetched_tweets_filename, hash_tag_list):
    #This handles Twitter authetification and the connection to Twitter Streaming API
        l = TwitterListener(fetched_tweets_filename)
        auth= self.twitter_authenticator.authenticate_twitter_app()
        stream = Stream(auth, l)

    #This line filter Twitter Streams to capture data by the keywords: 'python', 'javascript', 'ruby'
        stream.filter(track=hash_tag_list)
#This is a basic listener that just prints received tweets to stdout.
class TwitterListener(StreamListener):
    def __init__(self,fetched_tweets_filename):
        self.fetched_tweets_filename=fetched_tweets_filename
    def on_data(self, data):
        try:
            print (data)
            with open(self.fetched_tweets_filename,"a") as tf:
                tf.write(data)
            return True
        except BaseException as e:
            print ("error on_data: %s" % str(e))
        return True

    def on_error(self, status):
        if status==420:
            # in case rate limit occurs
            return False
        print (status)

class TweetAnalyzer():
    """
    Functionality for analyzing and categorizing content from tweets.
    """
    def tweets_to_data_frame(self, tweets):
        df = pd.DataFrame(data=[tweet.text for tweet in tweets], columns=['Tweets'])
        df['id'] = np.array([tweet.id for tweet in tweets])
        df['len'] = np.array([len(tweet.text) for tweet in tweets])
        df['date'] = np.array([tweet.created_at for tweet in tweets])
        df['source'] = np.array([tweet.source for tweet in tweets])
        df['likes'] = np.array([tweet.favorite_count for tweet in tweets])
        df['retweets'] = np.array([tweet.retweet_count for tweet in tweets])

        return df

 
if __name__ == '__main__':

    twitter_client = TwitterClient()
    tweet_analyzer = TweetAnalyzer()

    api = twitter_client.get_twitter_client_api()

    tweets = api.user_timeline(screen_name=
                               "AIT_News", count=40)
    #filtering by location
    tweets= tweets.filter(locations=[-6.38,49.87,1.77,55.81])
    hash_tag_list=["landslide"]
    df = tweet_analyzer.tweets_to_data_frame(tweets)
    final=[]
    #filtering those we want
    for tweet in df["Tweets"]:
        for ele in hash_tag_list:
            if ele in tweet:
                final.append(tweet)
    print(final)
